vim9script

set nocompatible
filetype plugin on
syntax on

color murphy

set hlsearch incsearch

set tabstop=4
set shiftwidth=4
set expandtab
set autoindent

set colorcolumn=80
set cursorline

set nowrap

set hidden

set number
set relativenumber

g:mapleader = ' '

g:vimwiki_list = [
    {
        'path': '~/Workspace/note/',
        'ext': '.md',
        'syntax': 'markdown',
    }
]


hi MatchParen ctermbg=Black ctermfg=Green term=None


def InstallVimwiki(destination: string)
    const url = 'https://github.com/vimwiki/vimwiki.git'
    const tag = 'v2024.01.24'
    const to  = destination .. '/' .. 'vimwiki'

    var cmd: string
    var output: string

    if exists(":VimwikiIndex") == 0
        cmd = ['git', 'clone', url, to]->join(' ')
        output = system(cmd)
        if v:shell_error != 0
            echoerr output
            return
        endif
        cmd = ['git', '-C', to, 'checkout', 'tags/' .. tag]->join(' ')
        output = system(cmd)
        if v:shell_error != 0
            echoerr output
            return
        endif

        var doc_path = to .. '/' .. 'doc'
        execute 'helptags ' .. doc_path

        echo "Install vimwiki successful! Path: " .. to
    endif
enddef

def InstallCommentary(destination: string)
    const url = 'https://github.com/tpope/vim-commentary.git'
    const tag = 'v1.3'
    const to  = destination .. '/' .. 'commentary'

    var cmd: string
    var output: string

    if exists("g:loaded_commentary") == 0
        cmd = ['git', 'clone', url, to]->join(' ')
        output = system(cmd)
        if v:shell_error != 0
            echoerr output
            return
        endif
        cmd = ['git', '-C', to, 'checkout', 'tags/' .. tag]->join(' ')
        output = system(cmd)
        if v:shell_error != 0
            echoerr output
            return
        endif

        var doc_path = to .. '/' .. 'doc'
        execute 'helptags ' .. doc_path

        echo "Install commentary successful! Path: " .. to
    endif
enddef

def! g:InstallEditorPlugin(plugin_name: string)
    if executable('git') != 1
        echoerr "Installing need to use git command but it's unavailable"
        return
    endif

    var path_segments = [getenv('HOME'), '.vim', 'pack', 'plugins', 'start']
    var destination = join(path_segments, '/')
    mkdir(destination, 'p')
    

    if plugin_name == 'vimwiki'
        InstallVimwiki(destination)
    elseif plugin_name == 'commentary' 
        InstallCommentary(destination)
    else
        echoerr "Unsupported plugin name " .. plugin_name
    endif
enddef

command! -nargs=1 InstallEditorPlugin call g:InstallEditorPlugin(<f-args>)
